AWSTemplateFormatVersion: '2010-09-09'

# TODO: add statsd sidecar to collect metrics/ prometheus https://prometheus.io/

Description: >
  This template creates ECS task definition and service

Parameters:
  Cluster:
    Type: String
    Description: The cluster on which to run service

  DesiredCount:
    Type: Number
    Default: 2
    Description: The number of instantiations of the specified task definition to place and keep running on cluster

  TaskCpu:
    Type: Number
    Default: 512
    Description: How much CPU to give the task
  TaskMemory:
    Type: Number
    Default: 1024
    Description: How much memory in megabytes to give the task

  AppContainerImage:
    Type: String
    Description: The image used to start a container
  AppContainerCpu:
    Type: Number
    Default: 256
    Description: How much CPU to give the container. 1024 is 1 CPU
  AppContainerMemory:
    Type: Number
    Default: 512
    Description: How much memory in megabytes to give the container
  AppContainerPort:
    Type: Number
    Default: 80
    Description: What port number the application inside the docker container is binding to

  AuthContainerImage:
    Type: String
    Description: The image used to start a container
  AuthContainerCpu:
    Type: Number
    Default: 256
    Description: How much CPU to give the container. 1024 is 1 CPU
  AuthContainerMemory:
    Type: Number
    Default: 512
    Description: How much memory in megabytes to give the container
  AuthContainerPort:
    Type: Number
    Default: 80
    Description: What port number the application inside the docker container is binding to

  ServiceName:
    Type: String
    Description: The image used to start a container

  ProjectName:
    Type: String
    Description: Project or repository name used to identify created AWS resources

  VPC:
    Type: String
    Description: The identifier of the virtual private cloud

  Subnets:
    Type: List<AWS::EC2::Subnet::Id>

  LoadBalancerSG:
    Type: String
    Description: Load balancer security group ID

  LoadBalancerListener:
    Type: String

Resources:
  ServiceAppLG:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /ecs/${ServiceName}/app
      RetentionInDays: 30

  ServiceAuthLG:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /ecs/${ServiceName}/auth
      RetentionInDays: 30

  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
              - ecs-tasks.amazonaws.com
          Action:
            - sts:AssumeRole
      Policies:
        - PolicyName: AmazonECSTaskExecutionRolePolicy
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action:
                # Allow the ECS Tasks to download images from ECR
                - ecr:GetAuthorizationToken
                - ecr:BatchCheckLayerAvailability
                - ecr:GetDownloadUrlForLayer
                - ecr:BatchGetImage

                # Allow the ECS tasks to upload logs to CloudWatch
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: '*'

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Ref ServiceName
      Cpu: !Ref TaskCpu
      Memory: !Ref TaskMemory
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !GetAtt ECSTaskExecutionRole.Arn
      ContainerDefinitions:
        - Name: !Sub ${ServiceName}App
          Essential: true
          DependsOn:
            - ContainerName: !Sub ${ServiceName}Auth
              Condition: START
          Cpu: !Ref AppContainerCpu
          Memory: !Ref AppContainerMemory
          Image: !Ref AppContainerImage
          Environment:
            - Name: PORT
              Value: !Ref AppContainerPort
          PortMappings:
            - ContainerPort: !Ref AppContainerPort
          LogConfiguration:
            LogDriver: 'awslogs'
            Options:
              awslogs-group: !Sub /ecs/${ServiceName}/app
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: !Ref ServiceName
        - Name: !Sub ${ServiceName}Auth
          Essential: true
          Cpu: !Ref AuthContainerCpu
          Memory: !Ref AuthContainerMemory
          Image: !Ref AuthContainerImage
          Environment:
            - Name: PORT
              Value: !Ref AuthContainerPort
            - Name: DEV_DUCK_URL
              Value: !Sub http://localhost:${AppContainerPort}
          PortMappings:
            - ContainerPort: !Ref AuthContainerPort
          LogConfiguration:
            LogDriver: 'awslogs'
            Options:
              awslogs-group: !Sub /ecs/${ServiceName}/auth
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: !Ref ServiceName
      Tags:
        - Key: project
          Value: !Ref ProjectName
        - Key: stack
          Value: !Ref AWS::StackName

  ContainerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub ${ServiceName}ContainerSG
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !Ref AuthContainerPort
          ToPort: !Ref AuthContainerPort
          SourceSecurityGroupId: !Ref LoadBalancerSG

  Service:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: !Ref ServiceName
      Cluster: !Ref Cluster
      LaunchType: FARGATE
      DesiredCount: !Ref DesiredCount
      HealthCheckGracePeriodSeconds: 30
      TaskDefinition: !Ref TaskDefinition
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          Subnets: !Ref Subnets
          SecurityGroups:
            - !Ref ContainerSecurityGroup
      LoadBalancers:
        - ContainerName: !Sub ${ServiceName}Auth
          ContainerPort: !Ref AuthContainerPort
          TargetGroupArn: !Ref AuthTargetGroup

  AuthTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 20
      HealthCheckPath: /health
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      TargetType: ip
      Name: !Sub ${ServiceName}Auth-TG
      Port: !Ref AuthContainerPort
      Protocol: HTTP
      VpcId: !Ref VPC

  ServiceListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - TargetGroupArn: !Ref AuthTargetGroup
          Type: forward
      Conditions:
        - Field: path-pattern
          Values:
            - '/add*'
      ListenerArn: !Ref LoadBalancerListener
      Priority: 1